alias functNo R1;
alias Pid R2;

//Disk load
if (functNo == 2) then
 alias PageNo R3;
 alias BlockNo R4;
 //call acquire disk from resource manager
 multipush(R1,R2,R3,R4);
  R1 = 3;
  R2 = [SYSTEM_STATUS_TABLE + 1];
  call MOD_0;
 multipop(R1,R2,R3,R4);

 //reset disk status table
 [DISK_STATUS_TABLE + 1] = 0; //load : 0 ; store : 1
 [DISK_STATUS_TABLE + 2] = PageNo;
 [DISK_STATUS_TABLE + 3] = BlockNo;

 //load
 load(PageNo,BlockNo);

 // now we wait .. for the interrupt
 [PROCESS_TABLE + Pid * 16 + 4] = WAIT_DISK;

 //invoke the scheduler
 multipush(R1,R2,R3,R4); 
  call MOD_5;
 multipop(R1,R2,R3,R4);

endif;

//Write Terminal
if (functNo == 3) then
 //calling resource manager to acquire terminal
 multipush(R1,R2,R3);
  R1 = 8; // funtion number
  R2 = [SYSTEM_STATUS_TABLE + 1]; //PID
  call MOD_0;
 multipop(R1,R2,R3);

 print R3; // word is in the R3 register

 //calling resource manager to Release Terminal
 multipush(R1,R2,R3);
  R1 = 9;
  R2 = [SYSTEM_STATUS_TABLE + 1];
  call MOD_0;
  R7 = R0; //return value is stored in R7 just in case
 multipop(R1,R2,R3);
endif;

//read terminal
if (functNo == 4) then
 //calling resource manager to acquire terminal
 multipush(R1,R2,R3);
  R1 = 8; // funtion number
  R2 = [SYSTEM_STATUS_TABLE + 1]; //PID
  call MOD_0;
 multipop(R1,R2,R3);

 read;

 [PROCESS_TABLE + Pid * 16 + 4] = WAIT_TERMINAL; // wait for read operation to complete
 
 //schedule another process meanwhile
 multipush(R1,R2,R3);
  call MOD_5;
 multipop(R1,R2,R3);

 alias wordAddr R3;
 alias phywordAddr R4;
 phywordAddr = [PTBR + ((wordAddr) / 512) * 2] * 512 + ((wordAddr) % 512) ; //address translation

 [phywordAddr] = [PROCESS_TABLE + Pid * 16 + 8]; //transfer from input buffer of process table
endif;
return;
 
