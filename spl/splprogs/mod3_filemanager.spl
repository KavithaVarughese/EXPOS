alias functNo R1;

//buffered read
if (functNo == 2) then
 alias DB R2;
 alias offset R3;
 alias MA R4;

 //identify the buffer = DB % 4
 alias buffer R5;
 buffer = DB % 4;
 
 //call acquire buffer from resource manager
 R8 = buffer;
 multipush(R1,R2,R3,R4,R5);
  R1 = 1;
  R2 = R8;
  R3 = [SYSTEM_STATUS_TABLE + 1];
  call MOD_0;
 multipop(R1,R2,R3,R4,R5);

 //check if the block in the buffer table is the same
 if ([BUFFER_TABLE + 4 * buffer] != DB) then
  //check if buffer content is dirty
  if ([BUFFER_TABLE + 4 * buffer + 1] == 1) then
   //call disk store from devide manager
   R8  = buffer;
   R9 = DB;
   multipush(R1,R2,R3,R4,R5);
    R1 = 1;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    R3 = 71 + R8;
    R4 = R9;
    call MOD_4;
   multipop(R1,R2,R3,R4,R5);

  //mark the buffer as clean
  [BUFFER_TABLE + 4 * buffer + 1] = 0;
  endif; 

  //load the disk block into the buffer invoking disk load in device manager
  R8 = buffer;
  R9 = DB;
  multipush(R1,R2,R3,R4,R5);
   R1 = 2;
   R2 = [SYSTEM_STATUS_TABLE + 1];
   R3 = 71 + buffer;
   R4 = R9;
   call MOD_4;
  multipop(R1,R2,R3,R4,R5);

  //set the new disk block into buffer table
  [BUFFER_TABLE + 4 * buffer]= DB;
 endif;

 //copy contents from the offset position of the buffer page to the translated address
 MA = [(71 + buffer) * 512 + offset];

 //release buffer invoked from resource manager
 R8 = buffer;
 multipush(R1,R2,R3,R4,R5);
  R1 = 2;
  R2 = R8;
  R3 = [SYSTEM_STATUS_TABLE + 1];
  call MOD_0;
 multipop(R1,R2,R3,R4,R5);

endif;

//open
if (functNo == 3) then
 alias filename R2;
 
 //get the inode index for filename 
 alias i R3;
 i = 0;
 while (i < 60) do
  if ([PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 1] == filename) then
   break;
  endif;
  i = i + 1;
 endwhile;

 //if no file with file name exists
 if (i == 60) then
  R0 = -1;
  return;
 endif;

 //call acquire inode to lock the inode
 R8 = i;
 multipush(R1,R2,R3);
  R1 = 4;
  R2 = R8;
  R3 = [SYSTEM_STATUS_TABLE + 1];
  call MOD_0;
  R7 = R0;
 multipop(R1,R2,R3);

 //check if locking failed or not
 if (R7 == -1)  then
  R0 = -1;
  return;
 endif;

 //check if file type is exec
 if ([INODE_TABLE + i * 16] == 3) then
  //release inode and then return -1
  R8 = i;
  multipush(R1,R2,R3);
   R1 = 5;
   R2 = R8;
   R3 = [SYSTEM_STATUS_TABLE + 1];
   call MOD_0;
  multipop(R1,R2,R3);
  R0 = -1;
  return;
 endif;

 //find free entry in OT index
 alias OTindex R4;
 OTindex = 0;
 while (OTindex < 32) do
  if ([OPEN_FILE_TABLE + OTindex * 4] == -1) then
   break;
  endif;
  OTindex = OTindex + 1;
 endwhile;

 //check if no entry is free
 if (OTindex == 32) then
  //release inode and then return -1
  R8 = i;
  multipush(R1,R2,R3,R4);
   R1 = 5;
   R2 = R8;
   R3 = [SYSTEM_STATUS_TABLE + 1];
   call MOD_0;
  multipop(R1,R2,R3,R4);
  R0 = -2;
  return;
 endif;

 //check if file name is root
 if (filename == "root") then
  [OPEN_FILE_TABLE + OTindex * 4] = INODE_ROOT;
 else
  //check if process count in file status table is -1
  if ([FILE_STATUS_TABLE + 4 * i + 1] == -1) then
   [FILE_STATUS_TABLE + 4 * i + 1] = 1;
  else
   [FILE_STATUS_TABLE + 4 * i + 1] = [FILE_STATUS_TABLE + 4 * i + 1] + 1;
  endif;
  [OPEN_FILE_TABLE + OTindex * 4] = i; //inode index number
 endif;
 
 //update rest of open file table
 [OPEN_FILE_TABLE + OTindex * 4 + 1] = 1;
 [OPEN_FILE_TABLE + OTindex * 4 + 2] = 0;

 //call release inode from resource manager
 R8 = i;
 multipush(R1,R2,R3,R4);
  R1 = 5;
  R2 = R8;
  R3 = [SYSTEM_STATUS_TABLE + 1];
  call MOD_0;
 multipop(R1,R2,R3,R4);

 R0 = OTindex;
endif;

//close
if (functNo == 4) then
 alias OTindex R2; 
 
 //get inode table index from open file table
 alias inodeIndex R3;
 inodeIndex = [OPEN_FILE_TABLE + OTindex * 4];

 //update open instance in open file table 
 [OPEN_FILE_TABLE + OTindex * 4 + 1] = [OPEN_FILE_TABLE + OTindex * 4 + 1] - 1;

 if ([OPEN_FILE_TABLE + OTindex * 4 + 1] == 0) then
  //invalidate the entry 
  [OPEN_FILE_TABLE + OTindex * 4] = -1;
  [OPEN_FILE_TABLE + OTindex * 4 + 1] = -1;
  [OPEN_FILE_TABLE + OTindex * 4 + 2] = -1;

  //check if file is not root 
  if ([INODE_TABLE + inodeIndex * 16 + 1] != "root") then
   //decrement file count in file status table
   [FILE_STATUS_TABLE + inodeIndex * 4 + 1] = [FILE_STATUS_TABLE + inodeIndex * 4 + 1] - 1;

   if ([FILE_STATUS_TABLE + inodeIndex * 4 + 1] == 0) then
    [FILE_STATUS_TABLE + inodeIndex * 4 + 1] = -1;
   endif;
  endif;
 endif; 
 
endif;

return;
