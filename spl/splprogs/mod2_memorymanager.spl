alias functNo R1;

//Get Free Page
if (functNo == 1) then
 [SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] + 1; //increment wait mem count
 
 //if memory is full i.e whether mem free count is 0
 while ([SYSTEM_STATUS_TABLE + 2] == 0) do
  [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 4] = WAIT_MEM;

  // meanwhile call scheduler
  multipush(R1);
   call MOD_5;
  multipop(R1);
 endwhile;

 //so no process waiting .. FREE MEMORY AVAILABLE, COME AND GET ME!!
 [SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] - 1; //wait mem count
 [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1; //mem free count
 
 alias counter R2;
 counter = 68;
 
 while (counter < 128) do
  if ([MEMORY_FREE_LIST + counter] == 0) then
   [MEMORY_FREE_LIST + counter] = 1;
   break;
  endif;
  counter = counter + 1; 
 endwhile;
 
 R0 = counter; //return the new page
 
endif;

//Release page
if (functNo == 2) then
 alias pageNo R2;
 [MEMORY_FREE_LIST + pageNo] = [MEMORY_FREE_LIST + pageNo] - 1;

 if ([MEMORY_FREE_LIST + pageNo] == 0) then
  [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] + 1; //mem free count incremented
 
  //memory is free .. the wait is over
  alias counter R3;
  counter = 1;
  while (counter < 16) do
   if ([PROCESS_TABLE + counter * 16 + 4] == WAIT_MEM) then
    [PROCESS_TABLE + counter * 16 + 4] = READY;
   endif;
  counter = counter + 1;
  endwhile;
 endif;

endif;

//release block
if (functNo == 4) then
 alias blockno R2;
 alias pid R3;

 // update the disk free list by decrementing the corresponding block number entry
 [DISK_FREE_LIST + blockno] = [DISK_FREE_LIST + blockno] - 1;
endif;

//get code block
if (functNo == 5) then
 alias blockno R2;
 alias i R3;
 alias j R4;
 i = 0;
 //check if the block is there in disk map table
 while (i < 16) do
  j = 4;
  while (j < 8) do
   // block there in disk map table 
   if ([DISK_MAP_TABLE + (i * 10) + j] == blockno) then 

    // check if corresponding page table entry is valid
    if ([PAGE_TABLE_BASE + (i * 20) + (j * 2)] != -1) then 
     R0 = [PAGE_TABLE_BASE + (i * 20) + (j * 2)]; // return the page
     // increment mem free list of the page
     [MEMORY_FREE_LIST + R0] = [MEMORY_FREE_LIST + R0] + 1;
     return;
    endif;
   endif;
  j = j + 1;
  endwhile;
  i = i + 1;
 endwhile;
 // so the code block is not already present, then get a new page by calling get Free Page in memory manager
 alias newPage R5;
 multipush(R1,R2,R3,R4);
  R1 = 1;
  call MOD_2;
  R7 = R0;
 multipop(R1,R2,R3,R4);
 
 newPage = R7;

 R10 = R7;
 R11 = blockno;
 //now call disk load from device manager
 multipush(R1,R2,R3,R4);
  R1 = 2;
  R2 = [SYSTEM_STATUS_TABLE + 1];
  R3 = R10;
  R4 = R11;
  
  call MOD_4;
  
 multipop(R1,R2,R3,R4);
 R0 = 76;
endif;

return;
