alias userSP R0; //saving userStack
userSP = SP;

[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP; //setting up kernel stack

SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1; //setting up kernel stack

[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 9; //changing mode flag

//Argument 1
alias filename R1;
filename = [[PTBR + ((userSP - 4) / 512) * 2] * 512 + ((userSP - 4) % 512)];

//check if file name is there in inode table
alias inodeIndex R2;
inodeIndex = 0; 
alias flag R3;
flag = 0;

while (inodeIndex < MAX_FILE_NUM) do
 if ([INODE_TABLE + inodeIndex * 16 + 1] == filename) then //filename is second word of inode table and size of each inode table entry is 16
  flag = 1;
  break;
 endif;
 inodeIndex = inodeIndex + 1;
endwhile;

// inodeIndex : the inode table entry number

if (flag == 0 || [INODE_TABLE + inodeIndex * 16] != 3) then //XEXE format = 3
 [[PTBR + ((userSP - 1) / 512) * 2] * 512 + ((userSP - 1) % 512)] = -1;
 print "doesnt exist";
 //revert everything
 [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 0;
 SP =userSP;
 ireturn;
endif;

//file present
//call exit from process manager
multipush(R0,R1,R2,R3);
 R1 = 3;
 R2 = [SYSTEM_STATUS_TABLE + 1];
 call MOD_1;
multipop(R0,R1,R2,R3);

//get user area page number for retrieval
alias UAPno R3;
UAPno = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] ;

//per process table is to be re initialized
alias counter R6;
counter = 0;
alias preProcessTable R1;
preProcessTable = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11] * 512 + 496;

while (counter < 16) do
 [preProcessTable + counter] = -1;
 counter = counter + 1;
endwhile; 

//Disk map table
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1] * 10 + 0] = -1; //UAP
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1] * 10 + 1] = -1; //unused
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1] * 10 + 2] = -1; //heap
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1] * 10 + 3] = -1;
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1] * 10 + 4] = [INODE_TABLE + 16 * inodeIndex + 8]; //code
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1] * 10 + 5] = [INODE_TABLE + 16 * inodeIndex + 9];
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1] * 10 + 6] = [INODE_TABLE + 16 * inodeIndex + 10];
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1] * 10 + 7] = [INODE_TABLE + 16 * inodeIndex + 11];
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1] * 10 + 8] = -1; //stack
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1] * 10 + 9] = -1; 

//update mem free list
[MEMORY_FREE_LIST + UAPno] = [MEMORY_FREE_LIST + UAPno] + 1;

//decrement mem free count in system status table
[SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;

//setting kernel stack of new process
SP = UAPno * 512 - 1 ; //this UAP holds the return address. So we should be careful not to lose it

PTBR = PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1] * 20; 
//setting up new process table .. PID same as old one
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 1] = [SYSTEM_STATUS_TABLE + 1]; 
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 4] = RUNNING; //state
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 7] = inodeIndex; // saving inode index
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 12] = 0;
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13] = 8*512;
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 14] = PTBR;
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 15] = 10;

//setting up new page table
[PTBR + 0] = 63; //library
[PTBR + 1] = "0100";
[PTBR + 2] = 64;
[PTBR + 3] = "0100";

alias newPage R4;

[PTBR + 4] = -1; //heap
[PTBR + 5] = "0000";
[PTBR + 6] = -1; //heap
[PTBR + 7] = "0000";


R15  = [INODE_TABLE + 16 * inodeIndex + 8];

//call get code page for 1st code block
multipush(R0,R1,R2,R3,R4,R6);
 R1 = 5;
 R2 = R15;
 call MOD_2;
 R7 = R0;
multipop(R0,R1,R2,R3,R4,R6);

newPage = R7;
[PTBR + 8] = newPage; //code
[PTBR + 9] = "0100"; 
[PTBR + 10] = -1; //heap
[PTBR + 11] = "0000";
[PTBR + 12] = -1; //heap
[PTBR + 13] = "0000";
[PTBR + 14] = -1; //heap
[PTBR + 15] = "0000";

multipush(R0,R1,R2,R3,R4);
 R1 = 1;
 call MOD_2;
 R7 = R0;
multipop(R0,R1,R2,R3,R4);

newPage = R7;
[PTBR + 16] = newPage; //stack
[PTBR + 17] = "0110";

multipush(R0,R1,R2,R3,R4);
 R1 = 1;
 call MOD_2;
 R7 = R0;
multipop(R0,R1,R2,R3,R4);

newPage = R7;
[PTBR + 18] = newPage; //stack
[PTBR + 19] = "0110";

//page table set



//store IP (codepage) to the top of stack
[[PTBR + 16] * 512] = [[PTBR + 8] * 512 + 1]; //[StackTop * 512] = [CodePageStart * 512 + 1]

SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13];

[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 0;

ireturn;

