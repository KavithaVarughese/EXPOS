alias functNo R1;
alias pid R2;

//get pcb
if (functNo == 1) then
 //check if there is any process entry free
 alias i R3;
 i = 1;
 while (i < 16) do
  if ([PROCESS_TABLE + i * 16 + 4] == TERMINATED) then
    [PROCESS_TABLE + i * 16 + 1] = i; 
    [PROCESS_TABLE + i * 16 + 4] = ALLOCATED; 
    [PROCESS_TABLE + i * 16 + 14] = PAGE_TABLE_BASE + 20 * i; 
    [PROCESS_TABLE + i * 16 + 15] = 10; 
    R0 = i;
    return;
  endif;
  i = i + 1;
 endwhile;
 //allocate it for child process from fork
 
  R0 = -1;
  return;
 
endif;

//Free User Area Page
if (functNo == 2) then

 //check open instances of files and semaphores and release them before invalidating
 alias i R3;
 i = 0;
 while (i < 8) do
  //semphore table 
  if ([[PROCESS_TABLE + pid * 16 + 11] * 512 + 496 + (i * 2)] == 1) then
   //call release semaphore from resource manager
   R8 = [[PROCESS_TABLE + pid * 16 + 11] * 512 + 496 + (i * 2) + 1];
   multipush(R1,R2,R3);
    R1 = 7;
    R2 = R8;
    R3 = [SYSTEM_STATUS_TABLE + 1];
    call MOD_0;
    R7 = R0;
   multipop(R1,R2,R3);

  endif;

  //open file table 
  if ([[PROCESS_TABLE + pid * 16 + 11] * 512 + 496 + (i * 2)] == 0) then
   //call close from file manager
   R8 = [[PROCESS_TABLE + pid * 16 + 11] * 512 + 496 + (i * 2) + 1];
   multipush(R1,R2,R3);
    R1 = 4;
    R2 = R8;
    call MOD_3;
   multipop(R1,R2,R3);

   //invalidate resource table entry
   [[PROCESS_TABLE + pid * 16 + 11] * 512 + 496 + i] = -1;
  endif;
 
  i = i + 1;
 endwhile;

 // call release page from memory manager
 multipush(R1,R2);
  R1 = 2;
  R2 = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11]; //user Area Page
  call MOD_2;
 multipop(R1,R2);

endif;

//exit process
if (functNo == 3) then
 
 //call Free Page Table from process manager 
 multipush(R1,R2);
  R1 = 4;
  R2 = [SYSTEM_STATUS_TABLE + 1]; //user Area Page
  call MOD_1;
 multipop(R1,R2);

 //call Free User Page Area from process manager 
 multipush(R1,R2);
  R1 = 2;
  R2 = [SYSTEM_STATUS_TABLE + 1]; //user Area Page
  call MOD_1;
 multipop(R1,R2);

 [PROCESS_TABLE + (pid * 16) + 4] = TERMINATED; //process is dead

 //if the program is terminating and is not called from the exec system call, then all processes waiting for this must change to ready
 if ([PROCESS_TABLE + pid * 16 + 9] != 9) then
  alias i R3;
  i = 1;
  while (i < 16) do
   if (([PROCESS_TABLE + 16 * i + 4] == WAIT_PROCESS) && ([PROCESS_TABLE + 16 * i + 5] == pid)) then
    [PROCESS_TABLE + 16 * i + 4] = READY;
    [PROCESS_TABLE + 16 * i + 5] = -1;
   endif;
   if ([PROCESS_TABLE + 16 * i + 2] == pid) then
    [PROCESS_TABLE + 16 * i + 2] = -1;  // making all children to orphans
   endif;
   i = i + 1;
  endwhile;
 endif;
 
endif;

//Free Page Table
if (functNo == 4) then
 //invalidate library
 [PTBR + 0] = -1;
 [PTBR + 1] = "0000";
 [PTBR + 2] = -1;
 [PTBR + 3] = "0000";

 //invalidating the rest
 alias counter R3;
 counter = 2;

 while (counter < 10) do
  if([PTBR + counter * 2] != -1) then
   
   //call release page from memory manager
   R4 = [PTBR + counter * 2];
   multipush(R1,R2,R3);
    R1 = 2;
    R2 = R4;
    call MOD_2;
   multipop(R1,R2,R3);
    
   [PTBR + counter * 2] = -1;
   [PTBR + 1 + counter * 2] = "0000";

  endif;
  counter = counter + 1;
 endwhile;

 //release blocks assigned for heap and stack in disk map table
 counter = 0;
 while (counter < 10) do
  if (((counter > 1 && counter < 4) || counter > 7) && ([DISK_MAP_TABLE + pid * 10 + counter] != -1)) then

   //call Release block from memory manage table to release the block
   multipush(R1,R2,R3);
    R1 = 4;
    R2 = [DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1] * 10 + counter];
    R3 = [SYSTEM_STATUS_TABLE + 1];
    call MOD_2;
   multipop(R1,R2,R3);

  endif;
  [DISK_MAP_TABLE + pid * 10 + counter] = -1; //invalidate all the entries in disk map table
  counter = counter + 1; 
 endwhile;
endif;
 
return;
