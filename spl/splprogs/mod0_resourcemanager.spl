alias functNo R1;

//Acquire Disk
if (functNo == 3) then
 alias PID R2;

 while ([DISK_STATUS_TABLE] == 1) do
  //please wait for the line to be free
  [PROCESS_TABLE + PID * 16 + 4] = WAIT_DISK;

  //meanwhile call scheduler
  multipush(R1,R2);
   call MOD_5;
  multipop(R1,R2);
 endwhile;

 [DISK_STATUS_TABLE] = 1;
 [DISK_STATUS_TABLE + 4] = PID;
endif;

//Acquire Inode
if (functNo == 4) then
 alias inodeIndex R2;
 alias pid R3;

 //check if file is free or not 
 while ([FILE_STATUS_TABLE + inodeIndex * 4] != -1) do
  [PROCESS_TABLE + pid * 16 + 4] = WAIT_FILE;
  [PROCESS_TABLE + pid * 16 + 5] = inodeIndex;

  //meanwhile call scheduler
  multipush(R1,R2,R3);
   call MOD_5;
  multipop(R1,R2,R3);
 endwhile;

 //check if inode entry is invalid
 if ([INODE_TABLE + inodeIndex * 16 + 1] == -1) then
  R0 = -1; // file already deleted by the time acquired
  return;
 endif;

 //update file status table on acquiring the inode table
 [FILE_STATUS_TABLE + inodeIndex * 4] = pid;

 R0 = 0;

endif;

//Release Inode
if (functNo == 5) then
 alias inodeIndex R2;
 alias pid R3;
 
 //check if the genuine process called this 
 if ([FILE_STATUS_TABLE + inodeIndex * 4] != pid) then
  R0 = -1;
  return;
 endif; 

 //invalidate the locking pid in file status table
 [FILE_STATUS_TABLE + inodeIndex * 4] = -1;
 
 //changing state to ready for all the processes waiting for this
 alias i R4;
 i = 1;
 while (i < 16) do 
  if (([PROCESS_TABLE + 16 * i + 4] == WAIT_FILE) && ([PROCESS_TABLE + 16 * i + 5] == inodeIndex)) then
   [PROCESS_TABLE + 16 * i + 4] = READY;
   [PROCESS_TABLE + 16 * i + 5] = -1;
  endif;
  i = i + 1;
 endwhile;

 R0 = 0; //success
endif;
//Aquire semaphore
if (functNo == 6) then
 alias PID R2;

 // getting free entry in semaphore table, free entry means process count is 0
 alias i R3;
 i = 0;
 while (i < 32) do
  if ([SEMAPHORE_TABLE + 4 * i + 1] == 0) then
   break;
  endif;
 endwhile;

 // if no semaphore is free
 if (i == 32) then
  R0 = -1;
  return;
 endif;

 //set the semaphore table for that entry
 [SEMAPHORE_TABLE + 4 * i + 1] = 1; //process count
 [SEMAPHORE_TABLE + 4 * i] = -1; // semaphore is not locked
endif;

//Release semaphore
if (functNo == 7) then
 alias semIndex R2;
 alias pid R3;

 // check if semaphore is locked by calling process
 if ([SEMAPHORE_TABLE + 4 * semIndex] != pid) then
  R0 = -1; //failure
  return;
 endif;
 
 // update semaphore table
 [SEMAPHORE_TABLE + 4 * semIndex] = -1;
 [SEMAPHORE_TABLE + semIndex * 4 + 1] = [SEMAPHORE_TABLE + 4 * semIndex + 1] - 1; //if the process count is 0 , its officially free

 // free all process blocked due to this semaphore being locked
 alias i R4;
 i = 1;
 while (i < 16) do
  if (([PROCESS_TABLE + i * 16 + 4] == WAIT_SEMAPHORE) && ([PROCESS_TABLE + i * 16 + 5] == semIndex)) then
   [PROCESS_TABLE + i * 16 + 4] = READY;
  endif;  
  i = i + 1;
 endwhile; 

 R0 = 0; //indicating success
endif;

//Acquire Terminal
if (functNo == 8) then
 alias PID R2;

 //check if the terminal is free or not
 while ([TERMINAL_STATUS_TABLE] == 1) do 
  [PROCESS_TABLE + 16 * PID + 4] = WAIT_TERMINAL; // change to waiting for the terminal to be free
  
  //call scheduler so that some other process can run meanwhile
  multipush(R1,R2,R3);
   call MOD_5;
  multipop(R1,R2,R3);
 endwhile;

 // successfully gained control over terminal
 [TERMINAL_STATUS_TABLE] = 1;
 [TERMINAL_STATUS_TABLE + 1] = PID; 
endif; 

//Release Terminal
if (functNo == 9) then
 alias PID R2;

 //check whether the process who is releasing is the one who acquired it
 if([TERMINAL_STATUS_TABLE + 1] != PID) then
  R0 = -1;  //unsuccessful release
  return;  // get lost cheater
 endif;

 //successful release
 [TERMINAL_STATUS_TABLE] = 0;
 
 //the wait is over... The Terminal is freeeee!
 alias i R3;
 i = 1;
 while (i<16) do
  if ([PROCESS_TABLE + i * 16 + 4] == WAIT_TERMINAL) then
   [PROCESS_TABLE + i * 16 + 4] = READY;
  endif;
  i = i + 1;
 endwhile;

 R0 = 0; //success!
endif;

return;
