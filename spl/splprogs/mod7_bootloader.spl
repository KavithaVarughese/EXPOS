//load exception handler
loadi(2,15);
loadi(3,16);

//load timer interrupt
loadi(4,17); //(memory,disk)
loadi(5,18);

//load disk interrupt
loadi(6,19);
loadi(7,20);

//load console interrupt
loadi(8,21);
loadi(9,22);

//load int6_read
loadi(14,27);
loadi(15,28);

//load int7_write
loadi(16,29);
loadi(17,30);

//load int9_exec
loadi(20,33);
loadi(21,34);

//load int10_halt program
loadi(22,35);
loadi(23,36);

//load module 0 .. resource manager
loadi(40,53);
loadi(41,54);

//load module 1 .. process manager
loadi(42,55);
loadi(43,56);

//load module 2 .. memory manager
loadi(44,57);
loadi(45,58);

//load module 4 .. device manager module
loadi(48,61);
loadi(49,62);

//load module 5 .. scheduler
loadi(50,63);
loadi(51,64);

//inode table copy
loadi(59,3);
loadi(60,4);

//load library
loadi(63,13);
loadi(64,14);

//load init program

loadi(65,7);
loadi(66,8);


//even number
loadi(83,70);
//prime numbers
loadi(86,72);

//setting up page table for init

PTBR = PAGE_TABLE_BASE+20; //PTBR for init process
PTLR = 10;  //size of page table

[PTBR+0] = 63; //library
[PTBR+1] = "0100"; //auxillary information
[PTBR+2] = 64;
[PTBR+3] = "0100";
[PTBR+4] = 78; //heap pages
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";
[PTBR+8] = 65; //code pages
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0100";
[PTBR+14] = -1;
[PTBR+15] = "0100";
[PTBR+16] = 76; //stack pages
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";

//setting up process table for init
[PROCESS_TABLE + 16 + 1] = 1; //PID
[PROCESS_TABLE + 16 + 4] = CREATED;
[PROCESS_TABLE + 16 + 11] = 80; //userArea Page
[PROCESS_TABLE + 16 + 12] = 0;
[PROCESS_TABLE + 16 + 13] = 8*512;
[PROCESS_TABLE + 16 + 14] = PTBR;
[PROCESS_TABLE + 16 + 15] = PTLR;

//Note the PTBR and PTLR are already initialised on line 67 and 68

[76*512] = [65*512 + 1]; //stack hold the ip address of the next instructions of init process

//setting up pre process table for init process
alias preprocesstable R1;
preprocesstable = 80 * 512 + 496;
alias i R0;
i = 0;

while (i < 16) do
 [preprocesstable + i] = -1;
 i = i + 1;
endwhile;

//odd numbers

PTBR = PAGE_TABLE_BASE+40; //PTBR for init process
PTLR = 10;  //size of page table

[PTBR+0] = 63; //library
[PTBR+1] = "0100"; //auxillary information
[PTBR+2] = 64;
[PTBR+3] = "0100";
[PTBR+4] = -1; //heap pages
[PTBR+5] = "0000";
[PTBR+6] = -1;
[PTBR+7] = "0000";
[PTBR+8] = 83; //code pages
[PTBR+9] = "0100";
[PTBR+10] = -1;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0100";
[PTBR+14] = -1;
[PTBR+15] = "0100";
[PTBR+16] = 84; //stack pages
[PTBR+17] = "0110";
[PTBR+18] = -1;
[PTBR+19] = "0110";

//setting up process table for init
[PROCESS_TABLE + 16*2 + 1] = 2; //PID
[PROCESS_TABLE + 16*2 + 4] = CREATED;
[PROCESS_TABLE + 16*2 + 11] = 85; //userArea Page
[PROCESS_TABLE + 16*2 + 12] = 0;
[PROCESS_TABLE + 16*2 + 13] = 8*512;
[PROCESS_TABLE + 16*2 + 14] = PTBR;
[PROCESS_TABLE + 16*2 + 15] = PTLR;

//Note the PTBR and PTLR are already initialised on line 67 and 68

[84*512] = [83*512 + 1]; //stack hold the ip address of the next instructions of init process

[PROCESS_TABLE + 16*2 + 4] = TERMINATED;
[PROCESS_TABLE + 16*3 + 4] = TERMINATED;
[PROCESS_TABLE + 16*4 + 4] = TERMINATED;
[PROCESS_TABLE + 16*5 + 4] = TERMINATED;
[PROCESS_TABLE + 16*6 + 4] = TERMINATED;
[PROCESS_TABLE + 16*7 + 4] = TERMINATED;
[PROCESS_TABLE + 16*8 + 4] = TERMINATED;
[PROCESS_TABLE + 16*9 + 4] = TERMINATED;
[PROCESS_TABLE + 16*10 + 4] = TERMINATED;
[PROCESS_TABLE + 16*11 + 4] = TERMINATED;
[PROCESS_TABLE + 16*12 + 4] = TERMINATED;
[PROCESS_TABLE + 16*13 + 4] = TERMINATED;
[PROCESS_TABLE + 16*14 + 4] = TERMINATED;
[PROCESS_TABLE + 16*15 + 4] = TERMINATED;

//Terminal Status Table
[TERMINAL_STATUS_TABLE] = 0;

//Disk Status Table
[DISK_STATUS_TABLE] = 0;

//initializing mem free list
i = 0;

while (i < 86) do //technically should be till 69, but we are already usign till 72 at the present stage
 [MEMORY_FREE_LIST + i] = 1;
 i = i + 1;
endwhile;
while (i<128) do 
 [MEMORY_FREE_LIST + i] = 0;
 i = i + 1;
endwhile;

return;
